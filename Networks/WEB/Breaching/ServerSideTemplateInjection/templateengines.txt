Template Engines
A template engine is like a machine that helps build web pages dynamically. Here's how it works in simple terms:

Imagine you're making a birthday card for a friend. You want to include their name, age, and a personalized message. Instead of writing a new card from scratch, you use a template with placeholders for the name, age, and message.

A template engine works similarly:

Template: The engine uses a pre-designed template with placeholders like {{ name }} for dynamic content.
User Input: The engine receives user input (like a name, age, or message) and stores it in a variable.
Combination: The engine combines the template with the user input, replacing the placeholders with the actual data.
Output: The engine generates a final, dynamic web page with the user's input inserted into the template.

Template engines offer various functionalities that speed up the development process but can also introduce risks. Most template engines allow expressions to be used for simple calculations or logic operations within templates.

In the context of SSTI, the template engine's ability to execute code is what makes it vulnerable to attacks. If user input is not properly sanitized, an attacker can inject malicious code, which the template engine will execute, leading to unintended consequences.

Common Template Engines
Template engines are an integral part of modern web development, allowing developers to generate dynamic HTML content by combining templates with data. Here are some of the most commonly used template engines:

Jinja2: Highly popular in Python applications, known for its expressiveness and powerful rendering capabilities.
Twig: The default template engine for Symfony in PHP, Twig offers a robust environment with secure default settings.
Pug/Jade: Known for its minimal and clean HTML templating syntax, Pug/Jade is popular among Node.js developers.

How Template Engines Parse and Process Inputs
Template engines work by parsing template files, which contain static content mixed with special syntax for dynamic content. When rendering a template, the engine replaces the dynamic parts with actual data provided at runtime. For example:

from jinja2 import Template

hello_template = Template("Hello, {{ name }}!")
output = hello_template.render(name="World")
print(output)

In this example, {{ name }} is a placeholder that gets replaced with the value "World" during rendering.

Determining the Template Engine
Different template engines have distinct syntaxes and features, making them vulnerable to SSTI in various ways. Here are some examples of vulnerable template syntaxes:

Jinja2/Twig
Jinja2 and Twig are similar in syntax and behavior, making them somewhat challenging to distinguish from each other just by payload responses. However, you can detect their presence by testing their expression-handling capabilities. For example, using the vulnerable VM, if you use the payload {{7*'7'}} in Twig, the output would be 49.

However, if you use the same payload in an application that uses Jinja2, the output would be 7777777

Jade/Pug
Pug, formerly known as Jade, uses a different syntax for handling expressions, which can be exploited to identify its usage. Pug/Jade evaluates JavaScript expressions within #{}. For example, using the payload #{7*7} would return 49.

Unlike Jinja2 or Twig, Pug/Jade directly allows JavaScript execution within its templates without the need for additional delimiters like {{ }}. 

You can also do:

{{7*7}} and that can give you the answer, if we hit 49, we know we have some code execution there.


Then, executing a command can look like:

{{exec('id')}}
