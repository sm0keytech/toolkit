Prototype pollution is a vulnerability that arises when an attacker manipulates an object's prototype, impacting all instances of that object.
In JavaScript, where prototypes facilitate inheritance, an attacker can exploit this to modify shared properties or inject malicious behaviour across objects.

Prototype pollution, on its own, might not always present a directly exploitable threat. However, its true potential for harm becomes notably pronounced when it joins with other types of vulnerabilities, such as XSS and CSRF.


A Common Example

Let's assume, we have a basic prototype for Person with an introduce method. The attacker aims to manipulate the behaviour of the introduce method across all instances by altering the prototype.
// Base Prototype for Persons
let personPrototype = {
  introduce: function() {
    return `Hi, I'm ${this.name}.`;
  }
};

// Person Constructor Function
function Person(name) {
  let person = Object.create(personPrototype);
  person.name = name;
  return person;
}

// Creating an instance
let ben = Person('Ben');
Please copy the above code, paste it into the console and hit enter. When we create a new object, ben, and call the introduce method, it displays Hi, I'm Ben, as shown in the following figure.

We will discuss in detail what exactly is happening in the background:
Prototype Definition: The Person prototype (personPrototype) is initially defined with a harmless introduce method, introducing the person.
Object Instantiation: An instance of Person is created with the name 'Ben' (let ben = Person('Ben');).
Prototype Pollution Attack: The attacker injects a malicious payload into the prototype's introduce method, changing its behaviour to display a harmful message.
Impact on Existing Instances: As a result, even the existing instance (ben) is affected, and calling ben.introduce() now outputs the attacker's injected message.

This example shows how an attacker can alter the behaviour of shared methods across objects, potentially causing security risks. Preventing prototype pollution involves carefully validating input data and avoiding directly modifying prototypes with untrusted content.


