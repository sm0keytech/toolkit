Walkthrough
The vulnerable environment has ATS (Apache Traffic Server) as the front-end proxy, Nginx as the web server back-end, and PHP processing the dynamic content. Due to differences in how ATS and Nginx prioritise Content-Length and Transfer-Encoding headers, there is a potential for HTTP request smuggling. Start by adding httprequestsmuggling.thm to your /etc/hosts file.

Assessing the Application
The web application for this room uses the link http://httprequestsmuggling.thm. It features a Home, Login, and Contact form that enables users to access and send feedback to the developer. For demonstration, the submitted queries are saved to the /submissions directory. Below is the screenshot of the application: 

Exploiting the Application
Using Burp Suite Proxy, intercept a request sent to the website's index. This request will become the baseline we will use to exploit the vulnerable application.
Send the request to Intruder and copy-paste the below payload to the Payload positions box.

POST / HTTP/1.1
Host: httprequestsmuggling.thm
Content-Type: application/x-www-form-urlencoded
Content-Length: 160
Transfer-Encoding: chunked

0

POST /contact.php HTTP/1.1
Host: httprequestsmuggling.thm
Content-Type: application/x-www-form-urlencoded
Content-Length: 500

username=test&query=ยง

Breakdown of the payload
In CL.TE vulnerability, since the proxy or the front-end prioritises the Content-Length header, 160 bytes of the body is assumed to be the body of the first POST. The front-end thinks this is a single request and forwards it into the pipeline, where the back-end server now prioritises Transfer-Encoding, ending the first POST request at the first 0 size chunk and assuming the second POST is a different request.

Go to the Payloads tab and set the Payload type to Null payloads. Subsequently, on the Payload settings, input 10000 to generate 10000 null payloads.


Go to the Resource pool tab and create a new resource pool. You may follow the screenshot below for the settings.

Click the Start Attack button in your Intruder tab to start the attack.

After a few minutes, check the /submissions website directory to see if the request to contact.php is smuggled containing the request of other users.

Note: Accessing the vulnerable application while the smuggling is taking effect will capture your request instead of the request from the target user.

Go through the text files to check for the password that was appended to the query parameter.

Use the password to log in to the application.

settings used in resource pool:
maximum concurrent requests - 10
delay between requests - 2000ms
