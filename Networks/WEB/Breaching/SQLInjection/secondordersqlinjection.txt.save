Second-order SQL injection, also known as stored SQL injection, exploits vulnerabilities where user-supplied input is saved and subsequently used in a different part of the application, possibly after some initial processing.
This type of attack is more insidious because the malicious SQL code does not need to immediately result in a SQL syntax error or other obvious issues, making it harder to detect with standard input validation techniques.
The injection occurs upon the second use of the data when it is retrieved and used in a SQL command, hence the name "Second Order".

Impact
The danger of Second-Order SQL Injection lies in its ability to bypass typical front-end defences like basic input validation or sanitisation, which only occur at the point of initial data entry. 
Since the payload does not cause disruption during the first step, it can be overlooked until it's too late, making the attack particularly stealthy.

Example
We will be using a book review application. 
The application allows users to add new books via a web page (add.php). 
Users are prompted to provide details about the book they wish to add to the database. 
You can access the app at http://10.10.153.4/second/add.php.
The data collected includes the SSN, book_name, and author.
Let's consider adding a book with the following details: SSN: UI00012, Book Name: Intro to PHP, Author: Tim.
This information is input through a form on the add.php page, and upon submission, it is stored in the BookStore database.

As we know, Second-Order SQL injection is notably challenging to identify. 
Unlike traditional SQL Injection, which exploits real-time processing vulnerabilities, it occurs when data previously stored in a database is later used in a SQL query.
Detecting this vulnerability often requires understanding how data flows through the application and is reused, necessitating a deep knowledge of the backend operations.

Analysis of the Code
Consider the PHP code snippet used in our application for adding books:
if (isset($_POST['submit'])) {

    $ssn = $conn->real_escape_string($_POST['ssn']);

    $book_name = $conn->real_escape_string($_POST['book_name']);

    $author = $conn->real_escape_string($_POST['author']);

    $sql = "INSERT INTO books (ssn, book_name, author) VALUES ('$ssn', '$book_name', '$author')";

    if ($conn->query($sql) === TRUE) {

        echo "<p class='text-green-500'>New book added successfully</p>";

    } else {

        echo "<p class='text-red-500'>Error: " . $conn->error . "</p>";

    }

}

The code uses the real_escape_string() method to escape special characters in the inputs.
The key issue here is the lack of parameterised queries, which is essential for preventing SQL injection attacks. When data is inserted using the real_escape_string() method,
it might include payload characters that don't cause immediate harm but can be activated upon subsequent retrieval and use in another SQL query.
For instance, inserting a book with a name like Intro to PHP'; DROP TABLE books;-- might not affect the INSERT operation but could have serious implications if the book name is later used in another SQL context without proper handling.
Let's try adding another book with the SSN test'.

Here we go, the SSN test' is successfully inserted into the database. The application includes a feature to update book details through an interface like update.php. This interface might display existing book details in editable form fields, retrieved based on earlier stored data, and then update them based on user input.
The pentester would investigate whether the application reuses the data (such as book_name) that was previously stored and potentially tainted. Then, he would construct SQL queries for updating records using this potentially tainted data without proper sanitisation or parameterisation.
By manipulating the update feature, the tester can see if the malicious payload added during the insertion phase gets executed during the update operation.
If the application fails to employ proper security practices at this stage, the earlier injected payload '; DROP TABLE books; -- could be activated, leading to the execution of a harmful SQL command like dropping a table.
You can visit the page http://10.10.153.4/second/update.php to update any book details.


