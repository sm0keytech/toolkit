Search Queries
LDAP search queries are fundamental in interacting with LDAP directories, allowing you to locate and retrieve information stored within the directory. Understanding how to construct these queries is crucial for effectively utilizing LDAP services.

An LDAP search query consists of several components, each serving a specific function in the search operation:
Base DN (Distinguished Name): This is the search's starting point in the directory tree.
Scope: Defines how deep the search should go from the base DN. It can be one of the following:
base (search the base DN only),
one (search the immediate children of the base DN),
sub (search the base DN and all its descendants).

Filter: A criteria entry must match to be returned in the search results. It uses a specific syntax to define these criteria.
Attributes: Specifies which characteristics of the matching entries should be returned in the search results.

The basic syntax for an LDAP search query looks like this:
(base DN) (scope) (filter) (attributes)

Filters and Syntax
Filters are the core of LDAP search queries, defining the conditions that entries in the directory must meet to be included in the search results. The syntax for LDAP filters is defined in RFC 4515, where filters are represented as strings with a specific format, such as (canonicalName=value). LDAP filters can use a variety of operators to refine search criteria, including equality (=), presence (=*), greater than (>=), and less than (<=).

One of the most essential operators in LDAP filters is the wildcard *, which signifies a match with any number of characters. This operator is crucial for formulating broad or partial-match search conditions.

Filter Examples
Simple Filter:
(cn=John Doe)
This filter targets entries with a canonical name (cn) exactly matching "John Doe".

Wildcards:
(cn=J*)
This filter applies the wildcard operator to match any entry where the cn begins with "J", regardless of what follows.

Complex Filters with Logical Operators:
For a more complex search query, filters can be used with each other using logical operators such as AND (&), OR (|), and NOT (!).
(&(objectClass=user)(|(cn=John*)(cn=Jane*)))
This filter searches for entries classified as "user" in their object class with a canonical name starting with either "John" or "Jane".

While not commonly exposed directly, LDAP services can be accessible over the network via ports 389 (for unencrypted or StartTLS connections) and 636 (for SSL/TLS connections). When LDAP services are accessible publicly, tools such as ldapsearch, part of the OpenLDAP suite, can be used to interact with the LDAP server. This tool allows a user to query and modify the LDAP directory from the command line, making it a valuable resource for both legitimate administrative tasks and, potentially, for attackers exploiting LDAP Injection vulnerabilities. For example:
ldapsearch -x -H ldap://10.10.195.13:389 -b "dc=ldap,dc=thm" "(ou=People)"
This command uses ldapsearch to perform a search against an LDAP server located at the vulnerable machine on port 389, starting at the base DN dc=ldap,dc=thm and using a filter that will search for entries under the organizational unit of People.


