Techniques for Testing ORM Injection

Manual code review
A thorough source code inspection can reveal raw query methods (such as whereRaw() in Laravel) that incorporate user inputs directly. Look for concatenated strings or unescaped inputs in ORM methods, which can indicate injection points.

Automated scanning
Use security scanning tools that are designed to detect ORM injection vulnerabilities. These tools analyse the codebase to identify patterns that could lead to injection, such as dynamic query construction or improper input handling.

Input validation testing
Perform manual testing by injecting payloads into application inputs to see if they affect the underlying ORM query. For example, injecting SQL control characters or keywords to determine if they alter the execution of the query.

Error-based testing
Enter deliberately incorrect or malformed data to trigger errors. Detailed error messages can provide insights into the structure of the underlying queries and indicate potential vulnerabilities.

Frameworks and ORM Injection Testing

Framework	ORM Library	Common Vulnerable Methods
Laravel		Eloquent ORM	whereRaw(), DB::raw()
Ruby on Rails	Active Record	where("name = '#{input}'")
Django		Django ORM	extra(), raw()
Spring		Hibernate	createQuery() with concatenation
Node.js		Sequelize	sequelize.query()


The table above highlights various web development frameworks and their associated ORM libraries, detailing common methods that are prone to vulnerabilities. For example, in Laravel, using whereRaw() or DB::raw() with user inputs can lead to ORM injection, but this can be prevented by using parameterised queries with the where() method. Similarly, in Django, methods like extra() and raw() can introduce vulnerabilities if not handled correctly, while using the filter method with parameterised queries ensures safer database interactions. Understanding these common pitfalls and adopting secure coding practices is crucial for maintaining the security of web applications.

Exploring the Target Application
Now that we know how to identify ORM injection vulnerabilities, let's visit the site at https://10-10-74-24.p.thmlabs.com. Here, you will see that the site prompts you for input. To determine which framework is being used, we can employ various techniques such as inspecting cookies, viewing the source code, and analysing HTTP headers.

Techniques to Identify the Framework
Verifying cookies: Examine the cookies set by the application. Frameworks often use unique naming conventions or formats for their session cookies, which can provide clues about the underlying technology.

Reviewing source code: Look through the HTML source code for comments, meta tags, or any embedded scripts that might reveal framework-specific signatures. However, this method may only sometimes be conclusive.

Analysing HTTP headers: HTTP headers can sometimes contain information about the server and framework. Tools like Burp Suite or browser developer tools can be used to inspect these headers.

URL structure: The structure of URLs can give hints about the framework. For instance, certain routing patterns are unique to specific frameworks.

Login and error pages: Authentication pages and error messages can sometimes reveal the framework. Some frameworks have distinctive error pages or login form structures. 

Now that we've identified that the application uses Laravel by inspecting the cookies, we can dig deeper by supplying malicious input to further explore its behaviour. Specifically, we'll input 1' to see how the application handles this data and confirm ORM use. When we visit the site at https://10-10-74-24.p.thmlabs.com, we are prompted to provide input. We enter 1' into the Email (Vulnerable) input field and submit the form to determine how the application processes this input. This particular input is designed to disrupt the query structure and reveal any underlying issues with how the application constructs its queries.

Upon submitting this input, we need to closely observe the application's response. If the application returns an error message, it can provide valuable insights into the query construction process. For instance, an error message such as SQLSTATE[42000]: Syntax error or access violation indicates that the input has been improperly handled and concatenated into an SQL query, resulting in a syntax error. The output shows that it uses Laravel's Eloquent ORM, as the error messages and query patterns are characteristic of Eloquent's query builder.

For red teamers, identifying ORM injection vulnerabilities is critical to assessing an application's security posture. ORM injection can be exploited if user inputs are not properly sanitised and validated, leading to unauthorised access or manipulation of database queries. Red teamers can uncover these vulnerabilities by employing techniques such as manual code review, automated scanning, and rigorous input validation testing. Using secure coding practices like parameterised queries and robust input validation is essential to mitigating the risks associated with ORM injection. Regular code reviews and the use of security tools can help developers identify and fix these issues.


