An attacker could abuse SSRF by crashing the server or creating a denial of service for other hosts. There are multiple instances (WordPress, CairoSVG) where attackers try to disrupt the availability of a system by launching SSRF attacks. 

Crashing the Server
In this SSRF demonstration, we will illustrate how an attacker can exploit a web application to cause a denial of service on the server. In our scenario, the vulnerability is exploited by supplying a malicious URL that points to a resource which, when accessed by the server, leads to excessive resource consumption or triggers a crash.
For example, the attacker might input a URL pointing to a large file on a slow server or a service that responds with an overwhelming amount of data. When the vulnerable application naively accesses this URL, it engages in an action that exhausts its own system resources, leading to a slowdown or complete crash.

How it works
Once we log in to the dashboard, we will see a tab called Training in the navigation bar, which is used to load the training content for the employees.
Once we click on that tab, we will see that it redirects to the URL http://hrms.thm/url.php?id=192.168.2.10/trainingbanner.jpg, which shows training content.

We notice that the url.php file is loading external content displayed here. What if we try to load any other content?
Try opening the file http://hrms.thm/url.php?id=10.10.10.10. Great! - it opened the file for you. 

Now that we know the server is vulnerable to basic SSRF, let's explore the code of url.php to make it crash the server.
Once we access the URL http://hrms.thm/?url=localhost/url, we will see the following code at the footer (only works if the user is not logged in).

<?php
....
....
    if ($imageSize < 100) {
		  // Output the image if it's within the size limit
    
		$base64Image = downloadAndEncodeImage($imageUrl);
        echo '<img src="' . htmlspecialchars($base64Image) . '" alt="Image" style="width: 100%; height: 100%; object-fit: cover;">';

    } else {
	 	// Memory Outage - server will crash


The above code shows that the url.php loads an image; if the image size exceeds 100KB, it shows a memory outage message and throws an error.

Let's try to crash the server by loading an image greater than 100 KB. For your convenience, we already have such an image available, which you can forge via http://hrms.thm/url.php?id=192.168.2.10/bigImage.jpg.

We can see that the threat posed by SSRF vulnerabilities extends beyond unauthorised data access or internal network exposure; it also includes the potential to disrupt or completely incapacitate critical server operations. By manipulating a vulnerable server to make unintended requests, attackers can overload the system, leading to crashes that result in denial of service.
