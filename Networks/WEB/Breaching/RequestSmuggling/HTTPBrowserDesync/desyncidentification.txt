HTTP Browser Desync Identification
For a better understanding of HTTP Browser Desynchronization, we will use a web application vulnerable to CVE-2022-29361. The web app will serve a single route.

from flask import Flask
app = Flask(__name__) @app.route("/", methods=["GET", "POST"]) def index(): return """ CVE-2022-29361 Welcome to the Vulnerable Web Application """ if __name__ == "__main__": app.run("0.0.0.0", 5000)

The web server impacted by this CVE is running Werkzeug v2.1.0, a versatile WSGI web application library. The crucial update in commit  4795b9a7 allows keep-alive connections when threaded or process options are configured.

To execute the attack, a straightforward approach is to utilize the fetch JavaScript function. This function allows for maintaining the connection ID across requests. The connection ID refers to a unique identifier assigned to a network connection between the client (browser) and the server. This identifier helps the server keep track of multiple connections and distinguish between them.
This consistent connection ID lies in its ability to facilitate exploitation for an attacker that could expose user information or session tokens such as cookies.
Moreover, in a cross-site attack, the browser shares user cookies based on how the SameSite flag is set (CORS), but this security rule doesn't apply if the current domain matches the remote one, as in Browser Desync attacks. In such cases, there's no restriction. 
You can hack your session by using the following payload from your browser command line.

fetch('http://10.10.196.247:5000/', {
    method: 'POST',
    body: 'GET /redirect HTTP/1.1\r\nFoo: x',
    mode: 'cors',
})

http://10.10.196.247:5000/
This is the URL to which the HTTP request is made for the vulnerable server. In this case, it's the registration endpoint on the local server.
{ method: 'POST' }

The method parameter specifies the HTTP method for the request. Here, it's set to 'POST'.
{ body: 'GET /redirect HTTP/1.1\r\nFoo: x' }

In the body, there is the second request that is going to be injected into the queue.
{ mode: 'cors' }

This flag triggers an error when visiting the 404 web page and avoids following the redirect.
First, letâ€™s start the Virtual Machine by pressing the Start Machine button at the top of this task. The vulnerable website will be running at the port 5000. 

Furthermore, this implies that an attacker can obtain complete control over a victim's browser when the specified payload is executed from the victim.

The following screenshots will show an example of the attack using the previous payload.

The desync attack involves injecting an arbitrary request into the request HTTP queue. Upon refreshing the page, it redirects to the /redirect endpoint, leading to a 404 error page display since that route is not present. 


