Denial of Service
Prototype pollution, a critical vulnerability in JavaScript applications, can lead to a Denial of Service (DoS) attack, among other severe consequences. This occurs when an attacker manipulates the prototype of a widely used object, causing the application to behave unexpectedly or crash altogether. In JavaScript, objects inherit properties and methods from their prototype, and altering this prototype impacts all objects that share it.

For example, if an attacker pollutes the tostring() function
Object.prototype.toString method, every subsequent call to this method by any object will execute the altered behaviour. In a complex application where toString is frequently used, this can lead to unexpected results, potentially causing the application to malfunction. The toString method is universally used in JavaScript. It's automatically invoked in many contexts, especially when an object needs to be converted to a string.

If the polluted method leads to inefficient processing or an infinite loop, it can exhaust system resources, effectively causing a DoS condition. Moreover, prototype pollution can also interfere with the application's business logic. Altering essential methods or properties might trigger unhandled exceptions or errors, leading to the termination of processes or services. This could render the server unresponsive in web applications, denying service to legitimate users.

Practical Example
Again, visit the URL http://10.10.0.5:5000 and see if we can crash the server through any input. As discussed, we have a method Object.prototype.toString that converts an object to a String datatype.
Visit the profile page of any friend; we can see from the previous task here how the server-side code looks like

<form action="/clone-album/1" method="post" class="mb-4">
        <h2 class="mb-3">Clone Album of Josh</h2>
        <div class="form-group">
            <label for="selectedAlbum">Select an Album to Clone:</label>
            <select class="form-control" name="selectedAlbum" id="selectedAlbum">
                    <option value="Trip to US">
                        Trip to US
                    </option>
            </select>
        </div>
        <div class="form-group">
            <label for="newAlbumName">New Album Name:</label>
            <input type="text" class="form-control" name="newAlbumName" id="newAlbumName"
                placeholder="Enter new album name">
        </div>
        <button type="submit" class="btn btn-primary">Clone Album</button>
    </form>

We see that this function is calling the merge function, which merges two objects. What if we try to send a payload that will override an existing function like toString(), and then if we call it on some object, it will cause abrupt behaviour for the server?
To prepare a payload, let's take a simple JSON code that will override the toString function as shown below:
{"__proto__": {"toString": "Just crash the server"}}

Go to the profile page and enter the payload instead of the new album name, as shown below:
Let's decode the payload once the app.js receives the request, parses the JSON, and assigns the toString function value in the __proto__ property of the friend object.
This creates an abrupt behaviour as toString is widely used among different objects. When we click on Clone Album, the application crashes, as shown below:
The TypeError we get is Object.prototype.toString.call is not a function, as we have already overridden that function using Prototype pollution.
You can override several other built-in objects/functions like toJSON, valueOf, constructor, etc., but the application won't crash in all behaviours. It entirely depends on the function that you are overriding.
Note: Visit the URL http://10.10.0.5:8080 to start the server again.


You could also use toStringLocale() as a nice little function for it aswell.
